"cor2" = list(
"estimate" = as.numeric(cor2$estimate),
"p.value" = cor2$p.value,
"n" = n2
),
"p.value.twosided" = as.numeric(p.value),
"p.value.onesided" = as.numeric(p.value) / 2
)
cat(paste(sep="",
"cor1: r=", format(result$cor1$estimate, digits=3), ", p=", format(result$cor1$p.value, digits=3), ", n=", result$cor1$n, "\n",
"cor2: r=", format(result$cor2$estimate, digits=3), ", p=", format(result$cor2$p.value, digits=3), ", n=", result$cor2$n, "\n",
"diffence: p(one-sided)=", format(result$p.value.onesided, digits=3), ", p(two-sided)=", format(result$p.value.twosided, digits=3), "\n"
))
return(result);
}
z_score<-function(x,mean,sd){
z=(x-mean)/sd
return(z)
}
group_class<-function(sub_id){
if (sub_id<3000){
leader=0
if(sub_id<2000){
discuss=0
}else{
discuss=1
}
}else{
leader=1
if(sub_id<4000){
discuss=0
}else{
discuss=1
}
}
return(c(discuss,leader))
}
group_individual_class<-function(sub_id,i){
if (sub_id<3000){
leader=0
if(sub_id<2000){
discuss=0
}else{
discuss=1
}
}else{
if(i!=5){
leader=1
}else{
leader=2
}
if(sub_id<4000){
discuss=0
}else{
discuss=1
}
}
return(c(discuss,leader))
}
cal_individual_performance<-function(s_decision,g_decision){
n<-c(0,0,0,0)
individual_performance<-c()
s_decision=s_decision-10
g_decision=g_decision-10
for (t in 1:length(s_decision)){
tmp_choice=s_decision[t]
tmp_g_decision=g_decision[t]
tmp_performance<-IGT_gain[tmp_choice,n[tmp_choice]+1]+IGT_loss[tmp_choice,n[tmp_choice]+1]
n[tmp_g_decision]<-n[tmp_g_decision]+1
individual_performance<-c(individual_performance,tmp_performance)
}
return(individual_performance)
}
cal_block_performance<-function(individual_performance){
block_performance<-rep(0,10)
for (b in 1:10){
block_performance[b]=sum(individual_performance[(10*(b-1)+1):(10*b)])
}
return(block_performance)
}
cal_ss<-function(c){
ss<-rep(0,10)
for (i in 1:10){
tmp_data=c[(10*(i-1)+1):(10*i)]
n_d=length(which(tmp_data==11|tmp_data==12))
n_a=length(which(tmp_data==13|tmp_data==14))
ss[i]=n_a-n_d
if(n_a+n_d!=10){
break
}
}
ss<-data.frame(c(1:10),ss)
return(ss)
}
group_standard_score=c()
for(i in 1:dim(group_tag)[1]){
sub_id=group_tag[i,1]
if(sub_id<3000){
if(sub_id<2000){
discuss=0
}else{
discuss=1
}
leader=0
}else{
leader=1
if(sub_id<4000){
discuss=0
}else{
discuss=1
}
}
tmp_data=no_leader_data[which(no_leader_data[,1]==sub_id),]
tmp_score=sum(cal_ss(tmp_data[,13])$ss)
group_standard_score<-rbind(group_standard_score,c(sub_id,tmp_score,discuss,leader))
}
group_standard_score<-as.data.frame(group_standard_score)
colnames(group_standard_score)<-c('sub_id','score','discuss','leader')
group_standard_score$discuss<-as.factor(group_standard_score$discuss)
group_standard_score$leader<-as.factor(group_standard_score$leader)
View(group_standard_score)
individual_ss=c()
for (i in 1:length(individual_tag)){
id=individual_tag[i]
tmp_data=subset(IGT_data_individual,subNo==id)
ss=c(id,sum(cal_ss(tmp_data$chose_performance)$ss),-1,-1)
individual_ss=rbind(individual_ss,ss)
}
colnames(individual_ss)<-c('sub_id','score','discuss','leader')
individual_ss<-as.data.frame(individual_ss)
rownames(individual_ss)=c(1:dim(individual_ss)[1])
individual_ss$discuss<-as.factor(individual_ss$discuss)
individual_ss$leader<-as.factor(individual_ss$leader)
group_standard_score<-rbind(individual_ss,group_standard_score)
View(group_standard_score)
cal_entropy<-function(p){
p <- p/sum(p)
tmp_p <- p[p>0]
entropy <- -1*sum(p*log2(p))
return(entropy)
}
cal_entropy([2,2,1,0])
p<-[2,2,1,0]
p<-(2,2,1,0)
p<-c(2,2,1,0)
cal_entropy(p)
p <- p/sum(p)
p
tmp_p <- p[p>0]
tmp_p
cal_entropy<-function(p){
p <- p/sum(p)
tmp_p <- p[p>0]
entropy <- -1*sum(tmp_p*log2(tmp_p))
return(entropy)
}
cal_entropy(p)
p<-c(3,2,0,0)
cal_entropy(p)
p<-c(4,1,0,0)
cal_entropy(p)
p<-c(5,0,0,0)
cal_entropy(p)
p<-c(2,1,1,1)
cal_entropy(p)
View(group_standard_score)
##code for figure2
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(cocor)
library(R.matlab)
library(lmerTest)
library(emmeans)
library(psych)
library(plyr)
library(overlapping)
library(lattice)
library(HDInterval)
## the theme for plotting
pic_theme <- theme(axis.title = element_text(face="bold", size = 45),
axis.text = element_text(face="bold", size = 42),
legend.title = element_text(face="bold", size = 38),
legend.text = element_text(face="bold", size = 38),
panel.background = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(size = 1),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
text = element_text(family = "sans"),
legend.position = c(0.92, 0.90))
##model free analysis for effect of social influence and individual-group inconsistence
library(lmerTest)
library(MASS)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(cocor)
library(R.matlab)
library(lmerTest)
library(emmeans)
library(psych)
library(plyr)
library(overlapping)
library(lattice)
library(HDInterval)
library(effectsize)
library(psych)
## the theme for plotting
pic_theme <- theme(axis.title = element_text(face="bold", size = 45),
axis.text = element_text(face="bold", size = 42),
legend.title = element_text(face="bold", size = 38),
legend.text = element_text(face="bold", size = 38),
panel.background = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(size = 1),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
text = element_text(family = "sans"),
legend.position = c(0.92, 0.90))
#function preparation
cor.diff.test = function(x1, x2, y1, y2, method="pearson") {
cor1 = cor.test(x1, x2, method=method)
cor2 = cor.test(y1, y2, method=method)
r1 = cor1$estimate
r2 = cor2$estimate
n1 = sum(complete.cases(x1, x2))
n2 = sum(complete.cases(y1, y2))
fisher = ((0.5*log((1+r1)/(1-r1)))-(0.5*log((1+r2)/(1-r2))))/((1/(n1-3))+(1/(n2-3)))^0.5
p.value = (2*(1-pnorm(abs(fisher))))
result= list(
"cor1" = list(
"estimate" = as.numeric(cor1$estimate),
"p.value" = cor1$p.value,
"n" = n1
),
"cor2" = list(
"estimate" = as.numeric(cor2$estimate),
"p.value" = cor2$p.value,
"n" = n2
),
"p.value.twosided" = as.numeric(p.value),
"p.value.onesided" = as.numeric(p.value) / 2
)
cat(paste(sep="",
"cor1: r=", format(result$cor1$estimate, digits=3), ", p=", format(result$cor1$p.value, digits=3), ", n=", result$cor1$n, "\n",
"cor2: r=", format(result$cor2$estimate, digits=3), ", p=", format(result$cor2$p.value, digits=3), ", n=", result$cor2$n, "\n",
"diffence: p(one-sided)=", format(result$p.value.onesided, digits=3), ", p(two-sided)=", format(result$p.value.twosided, digits=3), "\n"
))
return(result);
}
z_score<-function(x,mean,sd){
z=(x-mean)/sd
return(z)
}
group_class<-function(sub_id){
if (sub_id<3000){
leader=0
if(sub_id<2000){
discuss=0
}else{
discuss=1
}
}else{
leader=1
if(sub_id<4000){
discuss=0
}else{
discuss=1
}
}
return(c(discuss,leader))
}
group_individual_class<-function(sub_id,i){
if (sub_id<3000){
leader=0
if(sub_id<2000){
discuss=0
}else{
discuss=1
}
}else{
if(i!=5){
leader=1
}else{
leader=2
}
if(sub_id<4000){
discuss=0
}else{
discuss=1
}
}
return(c(discuss,leader))
}
cal_individual_performance<-function(s_decision,g_decision){
n<-c(0,0,0,0)
individual_performance<-c()
s_decision=s_decision-10
g_decision=g_decision-10
for (t in 1:length(s_decision)){
tmp_choice=s_decision[t]
tmp_g_decision=g_decision[t]
tmp_performance<-IGT_gain[tmp_choice,n[tmp_choice]+1]+IGT_loss[tmp_choice,n[tmp_choice]+1]
n[tmp_g_decision]<-n[tmp_g_decision]+1
individual_performance<-c(individual_performance,tmp_performance)
}
return(individual_performance)
}
cal_block_performance<-function(individual_performance){
block_performance<-rep(0,10)
for (b in 1:10){
block_performance[b]=sum(individual_performance[(10*(b-1)+1):(10*b)])
}
return(block_performance)
}
cal_ss<-function(c){
ss<-rep(0,10)
for (i in 1:10){
tmp_data=c[(10*(i-1)+1):(10*i)]
n_d=length(which(tmp_data==11|tmp_data==12))
n_a=length(which(tmp_data==13|tmp_data==14))
ss[i]=n_a-n_d
if(n_a+n_d!=10){
break
}
}
ss<-data.frame(c(1:10),ss)
return(ss)
}
cal_entropy<-function(p){
p <- p/sum(p)
tmp_p <- p[p>0]
entropy <- -1*sum(tmp_p*log2(tmp_p))
return(entropy)
}
group_standard_score=c()
for(i in 1:dim(group_tag)[1]){
sub_id=group_tag[i,1]
if(sub_id<3000){
if(sub_id<2000){
discuss=0
}else{
discuss=1
}
leader=0
}else{
leader=1
if(sub_id<4000){
discuss=0
}else{
discuss=1
}
}
tmp_data=no_leader_data[which(no_leader_data[,1]==sub_id),]
tmp_score=sum(cal_ss(tmp_data[,13])$ss)
group_standard_score<-rbind(group_standard_score,c(sub_id,tmp_score,discuss,leader))
}
group_standard_score<-as.data.frame(group_standard_score)
colnames(group_standard_score)<-c('sub_id','score','discuss','leader')
group_standard_score$discuss<-as.factor(group_standard_score$discuss)
group_standard_score$leader<-as.factor(group_standard_score$leader)
View(group_standard_score)
View(no_leader_data)
for(i in group_standard_score$sub_id){
tmp_data = no_leader_data(np_leader_data[:,1]==i)
#substract group_represnetative_data
for(i in group_standard_score$sub_id){
tmp_data = no_leader_data(np_leader_data[,1]==i)
}
#substract group_represnetative_data
for(i in group_standard_score$sub_id){
tmp_data = no_leader_data[np_leader_data[,1]==i,]
}
#substract group_represnetative_data
for(i in group_standard_score$sub_id){
tmp_data = no_leader_data[no_leader_data[,1]==i,]
}
View(tmp_data)
t=1
tmp_N = tmp_data[t,14:17]
tmp_N
tmp_N = as.numeric(tmp_data[t,14:17])
tmp_N
cal_entropy(tmp_N)
#substract group_represnetative_data
H_list = c()
for(i in group_standard_score$sub_id){
tmp_data = no_leader_data[no_leader_data[,1]==i,]
for (t in 1:100){
tmp_N = as.numeric(tmp_data[t,14:17])
tmp_H = cal_entropy(tmp_N)
H_list = c(H_list,tmp_H)
}
}
H_list
no_leader_data<-data.frame(no_leader_data,H_list)
#substract group_represnetative_data
H_list = c()
id_list = c()
for(i in group_standard_score$sub_id){
tmp_data = no_leader_data[no_leader_data[,1]==i,]
for (t in 1:100){
tmp_N = as.numeric(tmp_data[t,14:17])
tmp_H = cal_entropy(tmp_N)
H_list = c(H_list,tmp_H)
id_list = c(id_list,i)
}
}
group_entropy = data.frame(id_list,H_list)
group_entropy
group_entropy = aggregate(data = group_entropy, .~id,FUN = mean)
group_entropy = aggregate(data = group_entropy, .~id_list,FUN = mean)
group_entropy
group_standard_score<-data.frame(group_standard_score,group_entropy$H_list)
colnames(group_standard_score)[5] = 'group_entropy'
formal_data<- subset(group_standard_score,leader ==0 & discuss == 0)
ggplot(data=formal_data,aes(x=group_entropy, y = score)+
geom_point()+
geom_smooth(method = 'lm')+
pic_theme
.
ggplot(data=formal_data,aes(x=group_entropy, y = score)+
geom_point()+
geom_smooth(method = 'lm')+
pic_theme()
.
ggplot(data=formal_data,aes(x=group_entropy, y = score))+
geom_point()+
geom_smooth(method = 'lm')+
pic_theme
cor.test(group_standard_score$group_entropy,group_standard_score$score)
##compare with discussion?
formal_data<- subset(group_standard_score,leader ==0)
ggplot(data=formal_data,aes(x=group_entropy, y = score, color = discuss))+
geom_point()+
geom_smooth(aes(line_type = discuss),method = 'lm')+
pic_theme
ggplot(data=formal_data,aes(x=group_entropy, y = score, color = discuss))+
geom_point()+
geom_boxplot()+
pic_theme
ggplot(data=formal_data,aes(x=discuss, y = group_entropy, color = discuss))+
geom_point()+
geom_boxplot()+
pic_theme
ggplot(data=formal_data,aes(x=discuss, y = group_entropy, fill = discuss))+
geom_point()+
geom_boxplot()+
pic_theme
group_entropy_no_discuss <- subset(formal_data, discuss==0)$group_entropy
group_entropy_discuss <- subset(formal_data, discuss==1)$group_entropy
t.test(group_entropy_no_discuss,group_entropy_discuss)
View(group_tag)
tmp_loc = where(group_tag[,1]==tmp_id)
(for tmp_id in formal_data$sub_id){
for (tmp_id in formal_data$sub_id){
tmp_loc = (group_tag[,1]==tmp_id)
}
tmp_loc
tmp_id_list = group_tag[(group_tag[,1]==tmp_id),]
tmp_id_list
View(parameter_S)
mean_beta_list=c()
for (tmp_id in formal_data$sub_id){
tmp_id_list = group_tag[(group_tag[,1]==tmp_id),]
tmp_beta_list =c()
for (i in 1:5){
tmp_sub_id = tmp_id_list[i]
tmp_parameter = subset(parameter_S, id_list == tmp_sub_id)
tmp_beta_list = c(tmp_beta_list, tmp_parameter$BetaOthers)
}
mean_beta_list<-c(mean_beta_list,mean(tmp_beta_list))
}
mean_beta_list
formal_data<-data.frame(formal_data,mean_beta_list)
View(formal_data)
ggplot(data=formal_data,aes(x=mean_beta_list, y = group_entropy, color = discuss))+
geom_point()+
geom_smooth(aes(line_type = discuss),method = 'lm')+
pic_theme
tmp_beta_list
cor.test(formal_data$mean_beta_list,formal_data$group_entropy)
View(parameter_S)
View(group_standard_score)
mean_beta_list=c()
for (tmp_id in group_standard_score$sub_id){
tmp_id_list = group_tag[(group_tag[,1]==tmp_id),]
tmp_beta_list =c()
for (i in 1:5){
tmp_sub_id = tmp_id_list[i]
tmp_parameter = subset(parameter_S, id_list == tmp_sub_id)
tmp_beta_list = c(tmp_beta_list, tmp_parameter$BetaOthers)
}
mean_beta_list<-c(mean_beta_list,mean(tmp_beta_list))
}
mean_beta_list
group_standard_score<-data.frame(group_standard_score,mean_beta_list)
View(group_standard_score)
ggplot(data=group_standard_score,aes(x=mean_beta_list, y = group_entropy, color = discuss))+
geom_point()+
geom_smooth(aes(line_type = discuss),method = 'lm')+
pic_theme
ggplot(data=group_standard_score,aes(x=mean_beta_list, y = group_entropy))+
geom_point()+
geom_smooth(,method = 'lm')+
pic_theme
cor.test(group_standard_score$mean_beta_list,group_standard_score$group_entropy)
